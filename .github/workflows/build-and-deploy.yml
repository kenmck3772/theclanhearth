name: Build & Deploy (Tailwind + Cache Bust + Sitemap + Preload)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: pages
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm

      - name: Install deps
        run: npm install

      - name: Build Tailwind
        run: npm run build

      - name: Commit built CSS back to main
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add css/style.css
            git commit -m "Build Tailwind CSS"
            git push
          fi

      - name: Stage site to dist/
        run: |
          mkdir -p dist
          rsync -av \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            ./ dist/

      - name: Locate built CSS (normalize case)
        id: findcss
        shell: bash
        run: |
          set -e
          if [ -f "dist/css/style.css" ]; then
            echo "file=dist/css/style.css" >> "$GITHUB_OUTPUT"
          elif [ -f "dist/CSS/style.css" ]; then
            echo "Found dist/CSS/style.css; normalizing to dist/css/style.css"
            mkdir -p dist/css
            mv dist/CSS/style.css dist/css/style.css
            rm -rf dist/CSS || true
            echo "file=dist/css/style.css" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: dist/css/style.css not found"
            ls -R dist || true
            exit 1
          fi

      - name: Cache-bust + preload CSS in dist
        shell: bash
        env:
          CSS_FILE: ${{ steps.findcss.outputs.file }}
        run: |
          set -e
          HASH="$(sha256sum "$CSS_FILE" | cut -c1-10)"
          NEW="style.${HASH}.css"
          DIR="$(dirname "$CSS_FILE")"
          mv "$CSS_FILE" "${DIR}/${NEW}"

          # Replace stylesheet references in HTML
          find dist -type f -name "*.html" -print0 | xargs -0 sed -i 's|css/style\.css|css/'"$NEW"'|g'

          # Inject <link rel="preload"> before the stylesheet link (safe with perl)
          find dist -type f -name "*.html" -print0 | while IFS= read -r -d '' f; do
            perl -0777 -pe 's|<link rel="stylesheet" href="css/'"$NEW"'"|<link rel="preload" href="css/'"$NEW"'" as="style">\n    <link rel="stylesheet" href="css/'"$NEW"'"|g' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done

          echo "Hashed + preloaded CSS => ${NEW}"

      - name: Generate sitemap + robots
        shell: bash
        run: |
          set -e
          if [ -f CNAME ]; then
            BASE="https://$(cat CNAME)"
          else
            BASE="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          fi

          TS="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>' \
            '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' \
            '  <url>' \
            "    <loc>${BASE}/</loc>" \
            "    <lastmod>${TS}</lastmod>" \
            '    <changefreq>weekly</changefreq>' \
            '    <priority>1.0</priority>' \
            '  </url>' \
            '  <url>' \
            "    <loc>${BASE}/index.html</loc>" \
            "    <lastmod>${TS}</lastmod>" \
            '    <changefreq>weekly</changefreq>' \
            '    <priority>0.9</priority>' \
            '  </url>' \
            '</urlset>' > dist/sitemap.xml

          printf '%s\n' 'User-agent: *' 'Allow: /' "Sitemap: ${BASE}/sitemap.xml" > dist/robots.txt

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
